// Generated by gencpp from file asr_msgs/AsrObject.msg
// DO NOT EDIT!


#ifndef ASR_MSGS_MESSAGE_ASROBJECT_H
#define ASR_MSGS_MESSAGE_ASROBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/PoseWithCovariance.h>
#include <geometry_msgs/Point.h>
#include <std_msgs/ColorRGBA.h>

namespace asr_msgs
{
template <class ContainerAllocator>
struct AsrObject_
{
  typedef AsrObject_<ContainerAllocator> Type;

  AsrObject_()
    : header()
    , providedBy()
    , sampledPoses()
    , boundingBox()
    , sizeConfidence(0.0)
    , colorName()
    , color()
    , type()
    , typeConfidence(0.0)
    , identifier()
    , meshResourcePath()  {
    }
  AsrObject_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , providedBy(_alloc)
    , sampledPoses(_alloc)
    , boundingBox()
    , sizeConfidence(0.0)
    , colorName(_alloc)
    , color(_alloc)
    , type(_alloc)
    , typeConfidence(0.0)
    , identifier(_alloc)
    , meshResourcePath(_alloc)  {
  (void)_alloc;
      boundingBox.assign( ::geometry_msgs::Point_<ContainerAllocator> (_alloc));
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _providedBy_type;
  _providedBy_type providedBy;

   typedef std::vector< ::geometry_msgs::PoseWithCovariance_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PoseWithCovariance_<ContainerAllocator> >::other >  _sampledPoses_type;
  _sampledPoses_type sampledPoses;

   typedef boost::array< ::geometry_msgs::Point_<ContainerAllocator> , 8>  _boundingBox_type;
  _boundingBox_type boundingBox;

   typedef double _sizeConfidence_type;
  _sizeConfidence_type sizeConfidence;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _colorName_type;
  _colorName_type colorName;

   typedef  ::std_msgs::ColorRGBA_<ContainerAllocator>  _color_type;
  _color_type color;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef double _typeConfidence_type;
  _typeConfidence_type typeConfidence;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _identifier_type;
  _identifier_type identifier;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _meshResourcePath_type;
  _meshResourcePath_type meshResourcePath;





  typedef boost::shared_ptr< ::asr_msgs::AsrObject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::asr_msgs::AsrObject_<ContainerAllocator> const> ConstPtr;

}; // struct AsrObject_

typedef ::asr_msgs::AsrObject_<std::allocator<void> > AsrObject;

typedef boost::shared_ptr< ::asr_msgs::AsrObject > AsrObjectPtr;
typedef boost::shared_ptr< ::asr_msgs::AsrObject const> AsrObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::asr_msgs::AsrObject_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::asr_msgs::AsrObject_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace asr_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/root/catkin_ws/src/common_msgs-jade-devel/geometry_msgs/msg'], 'asr_msgs': ['/root/catkin_ws/src/asr_msgs-master/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::asr_msgs::AsrObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::asr_msgs::AsrObject_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::asr_msgs::AsrObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::asr_msgs::AsrObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::asr_msgs::AsrObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::asr_msgs::AsrObject_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::asr_msgs::AsrObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1f19dbc1869e696978e9b9ab24bfc085";
  }

  static const char* value(const ::asr_msgs::AsrObject_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1f19dbc1869e6969ULL;
  static const uint64_t static_value2 = 0x78e9b9ab24bfc085ULL;
};

template<class ContainerAllocator>
struct DataType< ::asr_msgs::AsrObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "asr_msgs/AsrObject";
  }

  static const char* value(const ::asr_msgs::AsrObject_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::asr_msgs::AsrObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Copyright (c) 2016, Kleinert Daniel, Meissner Pascal, Yi Xie\n\
# All rights reserved.\n\
#\n\
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\
#\n\
# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\
#\n\
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other \n\
# materials provided with the distribution.\n\
#\n\
# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific # prior written permission.\n\
#\n\
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \n\
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, \n\
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR # PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) # ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\
\n\
#Asr object ros message. @author Pascal Meissner. @version See SVN\n\
\n\
#Geometrical and qualitative information about a localized object with corresponding uncertainties.\n\
\n\
#Frame relative to which poses are given and timestamp.\n\
Header header\n\
\n\
#The concrete localization system used to get this object.\n\
string providedBy\n\
\n\
#Vector of different estimates of pose of given objects. Usually containing just a single element.\n\
#Each pose represented as multivariate normal distribution with 3D position vector and quaternion as mean and a covariance matrix.\n\
geometry_msgs/PoseWithCovariance[] sampledPoses\n\
\n\
#8 Corner Points of bounding box of object (part) concerning the axes of the frame of the part.\n\
#    4-----5          z\n\
#   /|    /|         /              x right\n\
#  / |   / |        /               y down\n\
# 0-----1  |       /-------x        z forwar \n\
# |  |  |  |       |\n\
# |  6--|--7       |\n\
# | /   | /        |\n\
# |/	|/         y\n\
# 2-----3	\n\
geometry_msgs/Point[8] boundingBox\n\
float64 sizeConfidence\n\
\n\
#Misc object (part) information. Color string should be set to textured for TexturedRecognition.\n\
string colorName\n\
std_msgs/ColorRGBA color\n\
\n\
#Type of the object (part).\n\
string type\n\
float64 typeConfidence\n\
\n\
#Used to destinguish different entities of the same object class.\n\
string identifier\n\
\n\
# Reference to mesh based object model\n\
string meshResourcePath\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseWithCovariance\n\
# This represents a pose in free space with uncertainty.\n\
\n\
Pose pose\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: std_msgs/ColorRGBA\n\
float32 r\n\
float32 g\n\
float32 b\n\
float32 a\n\
";
  }

  static const char* value(const ::asr_msgs::AsrObject_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::asr_msgs::AsrObject_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.providedBy);
      stream.next(m.sampledPoses);
      stream.next(m.boundingBox);
      stream.next(m.sizeConfidence);
      stream.next(m.colorName);
      stream.next(m.color);
      stream.next(m.type);
      stream.next(m.typeConfidence);
      stream.next(m.identifier);
      stream.next(m.meshResourcePath);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AsrObject_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::asr_msgs::AsrObject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::asr_msgs::AsrObject_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "providedBy: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.providedBy);
    s << indent << "sampledPoses[]" << std::endl;
    for (size_t i = 0; i < v.sampledPoses.size(); ++i)
    {
      s << indent << "  sampledPoses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::PoseWithCovariance_<ContainerAllocator> >::stream(s, indent + "    ", v.sampledPoses[i]);
    }
    s << indent << "boundingBox[]" << std::endl;
    for (size_t i = 0; i < v.boundingBox.size(); ++i)
    {
      s << indent << "  boundingBox[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.boundingBox[i]);
    }
    s << indent << "sizeConfidence: ";
    Printer<double>::stream(s, indent + "  ", v.sizeConfidence);
    s << indent << "colorName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.colorName);
    s << indent << "color: ";
    s << std::endl;
    Printer< ::std_msgs::ColorRGBA_<ContainerAllocator> >::stream(s, indent + "  ", v.color);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "typeConfidence: ";
    Printer<double>::stream(s, indent + "  ", v.typeConfidence);
    s << indent << "identifier: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.identifier);
    s << indent << "meshResourcePath: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.meshResourcePath);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASR_MSGS_MESSAGE_ASROBJECT_H
