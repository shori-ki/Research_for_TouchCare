// Generated by gencpp from file asr_msgs/AsrTypeAndId.msg
// DO NOT EDIT!


#ifndef ASR_MSGS_MESSAGE_ASRTYPEANDID_H
#define ASR_MSGS_MESSAGE_ASRTYPEANDID_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace asr_msgs
{
template <class ContainerAllocator>
struct AsrTypeAndId_
{
  typedef AsrTypeAndId_<ContainerAllocator> Type;

  AsrTypeAndId_()
    : type()
    , identifier()  {
    }
  AsrTypeAndId_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , identifier(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _identifier_type;
  _identifier_type identifier;





  typedef boost::shared_ptr< ::asr_msgs::AsrTypeAndId_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::asr_msgs::AsrTypeAndId_<ContainerAllocator> const> ConstPtr;

}; // struct AsrTypeAndId_

typedef ::asr_msgs::AsrTypeAndId_<std::allocator<void> > AsrTypeAndId;

typedef boost::shared_ptr< ::asr_msgs::AsrTypeAndId > AsrTypeAndIdPtr;
typedef boost::shared_ptr< ::asr_msgs::AsrTypeAndId const> AsrTypeAndIdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::asr_msgs::AsrTypeAndId_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::asr_msgs::AsrTypeAndId_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace asr_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/root/catkin_ws/src/common_msgs-jade-devel/geometry_msgs/msg'], 'asr_msgs': ['/root/catkin_ws/src/asr_msgs-master/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::asr_msgs::AsrTypeAndId_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::asr_msgs::AsrTypeAndId_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::asr_msgs::AsrTypeAndId_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::asr_msgs::AsrTypeAndId_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::asr_msgs::AsrTypeAndId_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::asr_msgs::AsrTypeAndId_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::asr_msgs::AsrTypeAndId_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9c9cc2c7fbc29ffd68b4f34c5bcbfd2e";
  }

  static const char* value(const ::asr_msgs::AsrTypeAndId_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9c9cc2c7fbc29ffdULL;
  static const uint64_t static_value2 = 0x68b4f34c5bcbfd2eULL;
};

template<class ContainerAllocator>
struct DataType< ::asr_msgs::AsrTypeAndId_<ContainerAllocator> >
{
  static const char* value()
  {
    return "asr_msgs/AsrTypeAndId";
  }

  static const char* value(const ::asr_msgs::AsrTypeAndId_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::asr_msgs::AsrTypeAndId_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Copyright (c) 2016, Kleinert Daniel, Meissner Pascal, Yi Xie\n\
# All rights reserved.\n\
#\n\
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\
#\n\
# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\
#\n\
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other \n\
# materials provided with the distribution.\n\
#\n\
# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific # prior written permission.\n\
#\n\
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \n\
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, \n\
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR # PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) # ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\
\n\
#Asr object message, reduced to type and identifier information.\n\
string type\n\
string identifier\n\
";
  }

  static const char* value(const ::asr_msgs::AsrTypeAndId_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::asr_msgs::AsrTypeAndId_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.identifier);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AsrTypeAndId_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::asr_msgs::AsrTypeAndId_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::asr_msgs::AsrTypeAndId_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "identifier: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.identifier);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASR_MSGS_MESSAGE_ASRTYPEANDID_H
