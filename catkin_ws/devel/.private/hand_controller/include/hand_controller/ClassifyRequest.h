// Generated by gencpp from file hand_controller/ClassifyRequest.msg
// DO NOT EDIT!


#ifndef HAND_CONTROLLER_MESSAGE_CLASSIFYREQUEST_H
#define HAND_CONTROLLER_MESSAGE_CLASSIFYREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hand_controller
{
template <class ContainerAllocator>
struct ClassifyRequest_
{
  typedef ClassifyRequest_<ContainerAllocator> Type;

  ClassifyRequest_()
    : force_x()
    , force_y()
    , force_z()  {
    }
  ClassifyRequest_(const ContainerAllocator& _alloc)
    : force_x(_alloc)
    , force_y(_alloc)
    , force_z(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _force_x_type;
  _force_x_type force_x;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _force_y_type;
  _force_y_type force_y;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _force_z_type;
  _force_z_type force_z;





  typedef boost::shared_ptr< ::hand_controller::ClassifyRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hand_controller::ClassifyRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ClassifyRequest_

typedef ::hand_controller::ClassifyRequest_<std::allocator<void> > ClassifyRequest;

typedef boost::shared_ptr< ::hand_controller::ClassifyRequest > ClassifyRequestPtr;
typedef boost::shared_ptr< ::hand_controller::ClassifyRequest const> ClassifyRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hand_controller::ClassifyRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hand_controller::ClassifyRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hand_controller

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'hand_controller': ['/root/catkin_ws/src/hand_controller/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hand_controller::ClassifyRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hand_controller::ClassifyRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hand_controller::ClassifyRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hand_controller::ClassifyRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hand_controller::ClassifyRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hand_controller::ClassifyRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hand_controller::ClassifyRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2fd00eb3054a7530ec4eb602592e4940";
  }

  static const char* value(const ::hand_controller::ClassifyRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2fd00eb3054a7530ULL;
  static const uint64_t static_value2 = 0xec4eb602592e4940ULL;
};

template<class ContainerAllocator>
struct DataType< ::hand_controller::ClassifyRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hand_controller/ClassifyRequest";
  }

  static const char* value(const ::hand_controller::ClassifyRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hand_controller::ClassifyRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] force_x\n\
float64[] force_y\n\
float64[] force_z\n\
";
  }

  static const char* value(const ::hand_controller::ClassifyRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hand_controller::ClassifyRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.force_x);
      stream.next(m.force_y);
      stream.next(m.force_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ClassifyRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hand_controller::ClassifyRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hand_controller::ClassifyRequest_<ContainerAllocator>& v)
  {
    s << indent << "force_x[]" << std::endl;
    for (size_t i = 0; i < v.force_x.size(); ++i)
    {
      s << indent << "  force_x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.force_x[i]);
    }
    s << indent << "force_y[]" << std::endl;
    for (size_t i = 0; i < v.force_y.size(); ++i)
    {
      s << indent << "  force_y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.force_y[i]);
    }
    s << indent << "force_z[]" << std::endl;
    for (size_t i = 0; i < v.force_z.size(); ++i)
    {
      s << indent << "  force_z[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.force_z[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HAND_CONTROLLER_MESSAGE_CLASSIFYREQUEST_H
