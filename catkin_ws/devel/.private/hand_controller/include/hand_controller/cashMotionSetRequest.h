// Generated by gencpp from file hand_controller/cashMotionSetRequest.msg
// DO NOT EDIT!


#ifndef HAND_CONTROLLER_MESSAGE_CASHMOTIONSETREQUEST_H
#define HAND_CONTROLLER_MESSAGE_CASHMOTIONSETREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hand_controller
{
template <class ContainerAllocator>
struct cashMotionSetRequest_
{
  typedef cashMotionSetRequest_<ContainerAllocator> Type;

  cashMotionSetRequest_()
    : repetitions(0)
    , set(0)
    , t_move(0)
    , t_wait(0)  {
    }
  cashMotionSetRequest_(const ContainerAllocator& _alloc)
    : repetitions(0)
    , set(0)
    , t_move(0)
    , t_wait(0)  {
  (void)_alloc;
    }



   typedef uint16_t _repetitions_type;
  _repetitions_type repetitions;

   typedef int16_t _set_type;
  _set_type set;

   typedef int16_t _t_move_type;
  _t_move_type t_move;

   typedef int16_t _t_wait_type;
  _t_wait_type t_wait;





  typedef boost::shared_ptr< ::hand_controller::cashMotionSetRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hand_controller::cashMotionSetRequest_<ContainerAllocator> const> ConstPtr;

}; // struct cashMotionSetRequest_

typedef ::hand_controller::cashMotionSetRequest_<std::allocator<void> > cashMotionSetRequest;

typedef boost::shared_ptr< ::hand_controller::cashMotionSetRequest > cashMotionSetRequestPtr;
typedef boost::shared_ptr< ::hand_controller::cashMotionSetRequest const> cashMotionSetRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hand_controller::cashMotionSetRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hand_controller::cashMotionSetRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hand_controller

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'hand_controller': ['/root/catkin_ws/src/hand_controller/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hand_controller::cashMotionSetRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hand_controller::cashMotionSetRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hand_controller::cashMotionSetRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hand_controller::cashMotionSetRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hand_controller::cashMotionSetRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hand_controller::cashMotionSetRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hand_controller::cashMotionSetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "109cc6351a2b407de68db394282f6650";
  }

  static const char* value(const ::hand_controller::cashMotionSetRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x109cc6351a2b407dULL;
  static const uint64_t static_value2 = 0xe68db394282f6650ULL;
};

template<class ContainerAllocator>
struct DataType< ::hand_controller::cashMotionSetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hand_controller/cashMotionSetRequest";
  }

  static const char* value(const ::hand_controller::cashMotionSetRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hand_controller::cashMotionSetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 repetitions\n\
int16 set\n\
int16 t_move\n\
int16 t_wait\n\
";
  }

  static const char* value(const ::hand_controller::cashMotionSetRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hand_controller::cashMotionSetRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.repetitions);
      stream.next(m.set);
      stream.next(m.t_move);
      stream.next(m.t_wait);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cashMotionSetRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hand_controller::cashMotionSetRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hand_controller::cashMotionSetRequest_<ContainerAllocator>& v)
  {
    s << indent << "repetitions: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.repetitions);
    s << indent << "set: ";
    Printer<int16_t>::stream(s, indent + "  ", v.set);
    s << indent << "t_move: ";
    Printer<int16_t>::stream(s, indent + "  ", v.t_move);
    s << indent << "t_wait: ";
    Printer<int16_t>::stream(s, indent + "  ", v.t_wait);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HAND_CONTROLLER_MESSAGE_CASHMOTIONSETREQUEST_H
